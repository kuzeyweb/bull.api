// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model applications {
  id          Int           @id @default(autoincrement())
  title       String
  name        String        @unique
  created_at  DateTime      @default(now())
  updated_at  DateTime?     @updatedAt
  deleted_At  DateTime?
  stores      stores[]
  categories  categories[]
  products    products[]
  users       users[]
  settings    settings[]
  status      status
  attributes  attributes[]
  permissions permissions[]
  roles       roles[]
}

model settings {
  id             Int          @id @default(autoincrement())
  name           String
  value          Boolean
  application_id Int
  application    applications @relation(fields: [application_id], references: [id])
}

model users {
  id               Int                @id @default(autoincrement())
  application_id   Int
  first_name       String
  last_name        String
  email            String
  password         String             @db.VarChar(400)
  profile_picture  String?            @db.VarChar(300)
  created_at       DateTime           @default(now())
  updated_at       DateTime?          @updatedAt
  last_login       DateTime?
  deleted_at       DateTime?
  application      applications       @relation(fields: [application_id], references: [id])
  roles            user_has_roles[]
  status           status
  user_has_stores  user_has_stores[]
  products         products[]
  reviews          reviews[]
  validation_codes validation_codes[]
  user_tokens      user_tokens[]
  orders           orders[]

  @@index([email])
}

model validation_codes {
  id      Int              @id @default(autoincrement())
  user_id Int
  email   String
  code    String           @db.VarChar(400)
  user    users            @relation(fields: [user_id], references: [id])
  type    validation_types

  @@index([email])
}

model stores {
  id              Int               @id @default(autoincrement())
  application_id  Int
  name            String
  slug            String            @unique
  banner          String?           @db.VarChar(300)
  icon            String?           @db.VarChar(300)
  created_at      DateTime          @default(now())
  updated_at      DateTime?         @updatedAt
  application     applications      @relation(fields: [application_id], references: [id])
  status          status
  user_has_stores user_has_stores[]
  products        products[]

  @@index([slug])
}

model user_tokens {
  id         Int         @id @default(autoincrement())
  user_id    Int
  token      String      @db.VarChar(300)
  created_at DateTime    @default(now())
  user       users       @relation(fields: [user_id], references: [id])
  expires_at DateTime
  type       token_types
}

model categories {
  id             Int                       @id @default(autoincrement())
  application_id Int
  name           String
  banner         String?
  icon           String?
  slug           String                    @unique
  description    String?                   @db.VarChar(500)
  parent_id      Int?
  application    applications              @relation(fields: [application_id], references: [id])
  products       products[]
  attributes     category_has_attributes[]

  @@index([slug, parent_id])
}

model products {
  id                 Int                  @id @default(autoincrement())
  application_id     Int
  name               String               @db.VarChar(300)
  slug               String               @unique
  barcode            String?
  category_id        Int
  vat_rate           Int?
  dimensional_weight Float?
  brand_name         String
  images             Json?
  average_rating     Float?
  list_price         Float?
  sale_price         Float?
  created_by         Int
  created_at         DateTime             @default(now())
  updated_at         DateTime?            @updatedAt
  deleted_at         DateTime?
  store_id           Int
  application        applications         @relation(fields: [application_id], references: [id])
  store              stores               @relation(fields: [store_id], references: [id])
  category           categories           @relation(fields: [category_id], references: [id])
  user               users                @relation(fields: [created_by], references: [id])
  inventory          product_inventories?
  product_variants   product_variants[]
  reviews            reviews[]
  order_items        order_items[]

  @@index([slug, brand_name])
}

model category_has_attributes {
  id           Int        @id @default(autoincrement())
  category_id  Int
  attribute_id Int
  category     categories @relation(fields: [category_id], references: [id])
  attributes   attributes @relation(fields: [attribute_id], references: [id])
}

model product_variants {
  id                 Int                  @id @default(autoincrement())
  barcode            String?
  images             Json?
  dimensional_weight Float?
  list_price         Float?
  sale_price         Float?
  product_id         Int?
  parent_id          Int?
  attribute_id       Int
  attribute_value_id Int
  inventory_id       Int?
  product            products?            @relation(fields: [product_id], references: [id], onDelete: Cascade)
  parent             product_variants?    @relation(name: "parent_id", fields: [parent_id], references: [id])
  attribute          attributes           @relation(fields: [attribute_id], references: [id])
  attribute_value    attribute_values     @relation(fields: [attribute_value_id], references: [id])
  inventory          product_inventories?
  product_variants   product_variants[]   @relation(name: "parent_id")
  order_items        order_items[]
}

model orders {
  id             Int           @id @default(autoincrement())
  customer_id    Int
  order_number   String
  gross_amount   Float
  total_discount Float
  net_amount     Float
  order_status   String
  payment_status String
  customer       users         @relation(fields: [customer_id], references: [id])
  items          order_items[]
}

model order_items {
  id                 Int               @id @default(autoincrement())
  order              orders            @relation(fields: [order_id], references: [id])
  order_id           Int
  product_id         Int?
  product            products?         @relation(fields: [product_id], references: [id])
  product_variant_id Int?
  product_variant    product_variants? @relation(fields: [product_variant_id], references: [id])
}

model product_inventories {
  id                 Int               @id @default(autoincrement())
  product_id         Int?              @unique
  quantity           Int
  is_in_stock        Boolean
  product_variant_id Int?              @unique
  product            products?         @relation(fields: [product_id], references: [id], onDelete: Cascade)
  product_variants   product_variants? @relation(fields: [product_variant_id], references: [id], onDelete: Cascade)
}

model attributes {
  id                      Int                       @id @default(autoincrement())
  is_variantable          Boolean
  application_id          Int
  name                    String                    @unique
  required                Boolean
  created_at              DateTime                  @default(now())
  parent_id               Int?
  application             applications              @relation(fields: [application_id], references: [id])
  parent                  attributes?               @relation(name: "parent_id", fields: [parent_id], references: [id])
  attribute_values        attribute_values[]
  category_has_attributes category_has_attributes[]
  variants                product_variants[]
  sub_attributes          attributes[]              @relation(name: "parent_id")
}

model attribute_values {
  id               Int                @id @default(autoincrement())
  name             String             @unique
  attribute_id     Int
  attribute        attributes         @relation(fields: [attribute_id], references: [id], onDelete: Cascade)
  product_variants product_variants[]
}

model reviews {
  id          Int       @id @default(autoincrement())
  created_by  Int
  product_id  Int
  comment     String?   @db.VarChar(500)
  is_flagged  Boolean   @default(false)
  has_comment Boolean
  rating      Float?
  created_at  DateTime  @default(now())
  updated_at  DateTime? @updatedAt
  deleted_at  DateTime?
  author      users     @relation(fields: [created_by], references: [id])
  product     products  @relation(fields: [product_id], references: [id])

  @@index([created_by, product_id])
}

model permissions {
  id             Int                     @id @default(autoincrement())
  application_id Int
  name           String
  application    applications            @relation(fields: [application_id], references: [id])
  roles          roles_has_permissions[]
}

model roles {
  id             Int                     @id @default(autoincrement())
  application_id Int
  name           String                  @unique
  created_at     DateTime                @default(now())
  updated_at     DateTime?               @updatedAt
  application    applications            @relation(fields: [application_id], references: [id])
  user_has_roles user_has_roles[]
  permissions    roles_has_permissions[]
}

model roles_has_permissions {
  id            Int         @id @default(autoincrement())
  role_id       Int
  permission_id Int
  roles         roles       @relation(fields: [role_id], references: [id], onDelete: Cascade)
  permissions   permissions @relation(fields: [permission_id], references: [id])
}

model user_has_roles {
  id         Int       @id @default(autoincrement())
  user_id    Int
  role_id    Int
  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt
  user       users     @relation(fields: [user_id], references: [id])
  role       roles     @relation(fields: [role_id], references: [id], onDelete: Cascade)
}

model user_has_stores {
  id       Int        @id @default(autoincrement())
  user_id  Int
  store_id Int
  user     users      @relation(fields: [user_id], references: [id])
  store    stores     @relation(fields: [store_id], references: [id], onDelete: Cascade)
  auth     store_auth @default(owner)
}

enum store_auth {
  owner
  employee
}

enum status {
  active
  inactive
  deleted
  email_validation_pending
}

enum validation_types {
  email_verification
  two_factor_auth
}

enum token_types {
  access
  refresh
}
